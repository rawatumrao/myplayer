class BitmovinPlayer extends VideoPlayer {
    constructor(config) {
        super(config);

        this.isSeekbarDisplayed = true; // Default: Seekbar is shown
        this.playerConfig = {
            key: '2994c75f-d1d0-46fa-abf0-d1d785f81e3a',
            analytics: {
                key: '5a27f534-b907-4190-8244-9040a45ddfbb',
                title: '',
                videoId: this.videoId,
            },
            playback: {
                autoplay: true,
                muted: false
            },
            ui: true,
            adaptationConfig: {
              maxStartupBitrate: 700000,
              startupBitrate: 700000
            }
        };

        this.player = new bitmovin.player.Player(this.playerElement, this.playerConfig);
        let videoElement = document.getElementById(this.config.playerVideoElementId);
        if (videoElement instanceof HTMLVideoElement) {
            this.player.setVideoElement(videoElement);
        }

        let uiManager = new UIManager(this.player, defaultUiConfig);
        this.setupEventListeners();
        this.setStatus(VideoPlayer.STATUS_INITALIZED);
    }
==================================

setupEventListeners() {
    log.debug('BitmovinPlayer::setupEventListeners()');

    // Maintain seekbar visibility when player is ready
    this.player.on(bitmovin.player.PlayerEvent.Ready, () => {
        log.debug(`BitmovinPlayer::Ready - Seekbar: ${this.isSeekbarDisplayed}`);
        this.toggleSeekBar(this.isSeekbarDisplayed);
    });

    // Handle source load
    this.player.on(bitmovin.player.PlayerEvent.SourceLoaded, () => {
        log.debug(`BitmovinPlayer::SourceLoaded - Seekbar: ${this.isSeekbarDisplayed}`);
        this.toggleSeekBar(this.isSeekbarDisplayed);
    });

    // Maintain seekbar state on stream switch
    this.player.on(bitmovin.player.PlayerEvent.StreamSwitched, () => {
        log.debug(`BitmovinPlayer::StreamSwitched - Seekbar: ${this.isSeekbarDisplayed}`);
        this.toggleSeekBar(this.isSeekbarDisplayed);
    });

    // Handle reconnects
    this.player.on(bitmovin.player.PlayerEvent.Reconnected, () => {
        log.debug(`BitmovinPlayer::Reconnected - Seekbar: ${this.isSeekbarDisplayed}`);
        this.toggleSeekBar(this.isSeekbarDisplayed);
    });

    // Hide seekbar on disconnect
    this.player.on(bitmovin.player.PlayerEvent.Disconnected, () => {
        log.debug(`BitmovinPlayer::Disconnected - Hiding Seekbar`);
        this.isSeekbarDisplayed = false;
        this.hideSeekBar();
    });

    // Additional existing event listeners...
}
========================

toggleSeekBar(display) {
    if (display) {
        this.showSeekBar();
    } else {
        this.hideSeekBar();
    }
}

==================

showSeekBar() {
    log.debug("BitmovinPlayer::showSeekBar()");
    const seekBar = document.getElementById("seek-bar-component");
    if (seekBar) {
        seekBar.classList.remove('hideViewerElements');
    }
    this.isSeekbarDisplayed = true; // Update state
}

hideSeekBar() {
    log.debug("BitmovinPlayer::hideSeekBar()");
    const seekBar = document.getElementById("seek-bar-component");
    if (seekBar) {
        seekBar.classList.add('hideViewerElements');
    }
    this.isSeekbarDisplayed = false; // Update state
}
=========================

